{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "import numpy as np # linear algebra\n",
        "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "from keras.models import Sequential\n",
        "from keras.layers import Dense, LSTM, Dropout, GRU, Bidirectional\n",
        "from tensorflow.keras import layers, callbacks\n",
        "\n",
        "import os\n",
        "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
        "    for filename in filenames:\n",
        "        print(os.path.join(dirname, filename))"
      ],
      "metadata": {
        "id": "vn1N2wKDKwDb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "id": "frPTazu5Bpjd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('/content/AAPL.csv')"
      ],
      "metadata": {
        "id": "ZuvBqRrgK2xs"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "id": "Jyrjuc58LId8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "3e92e081-8dbd-475a-8d86-9b3e9685e1e4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         Date      Open      High       Low     Close  Adj Close     Volume\n",
              "0  1980-12-12  0.128348  0.128906  0.128348  0.128348   0.099192  469033600\n",
              "1  1980-12-15  0.122210  0.122210  0.121652  0.121652   0.094017  175884800\n",
              "2  1980-12-16  0.113281  0.113281  0.112723  0.112723   0.087117  105728000\n",
              "3  1980-12-17  0.115513  0.116071  0.115513  0.115513   0.089273   86441600\n",
              "4  1980-12-18  0.118862  0.119420  0.118862  0.118862   0.091861   73449600"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b8af63f9-3fda-488a-96e4-e8e27b07a250\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1980-12-12</td>\n",
              "      <td>0.128348</td>\n",
              "      <td>0.128906</td>\n",
              "      <td>0.128348</td>\n",
              "      <td>0.128348</td>\n",
              "      <td>0.099192</td>\n",
              "      <td>469033600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1980-12-15</td>\n",
              "      <td>0.122210</td>\n",
              "      <td>0.122210</td>\n",
              "      <td>0.121652</td>\n",
              "      <td>0.121652</td>\n",
              "      <td>0.094017</td>\n",
              "      <td>175884800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1980-12-16</td>\n",
              "      <td>0.113281</td>\n",
              "      <td>0.113281</td>\n",
              "      <td>0.112723</td>\n",
              "      <td>0.112723</td>\n",
              "      <td>0.087117</td>\n",
              "      <td>105728000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1980-12-17</td>\n",
              "      <td>0.115513</td>\n",
              "      <td>0.116071</td>\n",
              "      <td>0.115513</td>\n",
              "      <td>0.115513</td>\n",
              "      <td>0.089273</td>\n",
              "      <td>86441600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1980-12-18</td>\n",
              "      <td>0.118862</td>\n",
              "      <td>0.119420</td>\n",
              "      <td>0.118862</td>\n",
              "      <td>0.118862</td>\n",
              "      <td>0.091861</td>\n",
              "      <td>73449600</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b8af63f9-3fda-488a-96e4-e8e27b07a250')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b8af63f9-3fda-488a-96e4-e8e27b07a250 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b8af63f9-3fda-488a-96e4-e8e27b07a250');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ddea6d1d-5ed8-43bf-8b39-2771aa97b738\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ddea6d1d-5ed8-43bf-8b39-2771aa97b738')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ddea6d1d-5ed8-43bf-8b39-2771aa97b738 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 10931,\n  \"fields\": [\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 10931,\n        \"samples\": [\n          \"1983-01-21\",\n          \"1995-07-18\",\n          \"1984-08-20\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Open\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 43.887625030453634,\n        \"min\": 0.0496650002896785,\n        \"max\": 198.0200042724609,\n        \"num_unique_values\": 6242,\n        \"samples\": [\n          131.19000244140625,\n          3.115356922149658,\n          42.4474983215332\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"High\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 44.35891211569542,\n        \"min\": 0.0496650002896785,\n        \"max\": 199.6199951171875,\n        \"num_unique_values\": 6184,\n        \"samples\": [\n          129.75,\n          32.73500061035156,\n          81.19000244140625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Low\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 43.44517315713777,\n        \"min\": 0.0491070002317428,\n        \"max\": 197.0,\n        \"num_unique_values\": 6171,\n        \"samples\": [\n          4.430714130401611,\n          2.128928899765014,\n          20.67357063293457\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 43.92380641232417,\n        \"min\": 0.0491070002317428,\n        \"max\": 198.1100006103516,\n        \"num_unique_values\": 6351,\n        \"samples\": [\n          43.58250045776367,\n          31.875,\n          6.625\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Adj Close\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 43.51702301345213,\n        \"min\": 0.0379517115652561,\n        \"max\": 197.85752868652344,\n        \"num_unique_values\": 7923,\n        \"samples\": [\n          23.806814193725582,\n          0.1781149506568908,\n          6.37156867980957\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Volume\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 335885126,\n        \"min\": 0,\n        \"max\": 7421640800,\n        \"num_unique_values\": 10367,\n        \"samples\": [\n          255987200,\n          52595200,\n          407890000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.tail()"
      ],
      "metadata": {
        "id": "SF7l0JEDLOqe",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "7bced664-dbb9-439c-feac-d3702a15ab0e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             Date        Open        High         Low       Close   Adj Close  \\\n",
              "10926  2024-04-17  169.610001  170.649994  168.000000  168.000000  168.000000   \n",
              "10927  2024-04-18  168.029999  168.639999  166.550003  167.039993  167.039993   \n",
              "10928  2024-04-19  166.210007  166.399994  164.080002  165.000000  165.000000   \n",
              "10929  2024-04-22  165.520004  167.259995  164.770004  165.839996  165.839996   \n",
              "10930  2024-04-23  165.350006  167.050003  164.919998  166.899994  166.899994   \n",
              "\n",
              "         Volume  \n",
              "10926  50901200  \n",
              "10927  43122900  \n",
              "10928  67772100  \n",
              "10929  48116400  \n",
              "10930  48917700  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b2616ab8-9043-4abb-9073-7cfa8642548e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Date</th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Adj Close</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>10926</th>\n",
              "      <td>2024-04-17</td>\n",
              "      <td>169.610001</td>\n",
              "      <td>170.649994</td>\n",
              "      <td>168.000000</td>\n",
              "      <td>168.000000</td>\n",
              "      <td>168.000000</td>\n",
              "      <td>50901200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10927</th>\n",
              "      <td>2024-04-18</td>\n",
              "      <td>168.029999</td>\n",
              "      <td>168.639999</td>\n",
              "      <td>166.550003</td>\n",
              "      <td>167.039993</td>\n",
              "      <td>167.039993</td>\n",
              "      <td>43122900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10928</th>\n",
              "      <td>2024-04-19</td>\n",
              "      <td>166.210007</td>\n",
              "      <td>166.399994</td>\n",
              "      <td>164.080002</td>\n",
              "      <td>165.000000</td>\n",
              "      <td>165.000000</td>\n",
              "      <td>67772100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10929</th>\n",
              "      <td>2024-04-22</td>\n",
              "      <td>165.520004</td>\n",
              "      <td>167.259995</td>\n",
              "      <td>164.770004</td>\n",
              "      <td>165.839996</td>\n",
              "      <td>165.839996</td>\n",
              "      <td>48116400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10930</th>\n",
              "      <td>2024-04-23</td>\n",
              "      <td>165.350006</td>\n",
              "      <td>167.050003</td>\n",
              "      <td>164.919998</td>\n",
              "      <td>166.899994</td>\n",
              "      <td>166.899994</td>\n",
              "      <td>48917700</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b2616ab8-9043-4abb-9073-7cfa8642548e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b2616ab8-9043-4abb-9073-7cfa8642548e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b2616ab8-9043-4abb-9073-7cfa8642548e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e5ff2b0d-41a5-4932-a92e-fa711581aa4e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e5ff2b0d-41a5-4932-a92e-fa711581aa4e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e5ff2b0d-41a5-4932-a92e-fa711581aa4e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "0"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.index = pd.to_datetime(df['Date'])\n",
        "df.drop(columns=['Date'], inplace=True)"
      ],
      "metadata": {
        "id": "NecFiIHZLSU0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train = df[(df.index.year<2021) & (df.index.year>=2016)]\n",
        "test = df[df.index.year>=2021]"
      ],
      "metadata": {
        "id": "lb3-w7vsLcgg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "MFfr1OojfCrQ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "TuG2Z2AWg8kE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(14,8))\n",
        "plt.plot(train['Close'], label='Train')\n",
        "plt.plot(test['Close'], label='Test')\n",
        "plt.legend()\n",
        "plt.title('Google Close Stock Price')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "e-Dl5wQCLdiK",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 699
        },
        "outputId": "b29c113e-ea8b-4730-c912-dd969dcb19d9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1400x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sc = MinMaxScaler(feature_range=(0,1))\n",
        "training_set_scaled = sc.fit_transform(train['Close'].values.reshape(-1, 1))"
      ],
      "metadata": {
        "id": "mTZL7AllLhY7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train = []\n",
        "y_train = []\n",
        "for i in range(80,len(training_set_scaled)):\n",
        "    X_train.append(training_set_scaled[i-80:i,0])\n",
        "    y_train.append(training_set_scaled[i,0])\n",
        "X_train, y_train = np.array(X_train), np.array(y_train)"
      ],
      "metadata": {
        "id": "S1AwLJd3LnnV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train = np.reshape(X_train, (X_train.shape[0],X_train.shape[1],1))"
      ],
      "metadata": {
        "id": "4fthZikdLr5b"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model = Sequential([\n",
        "    LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1],1)),\n",
        "    layers.Dropout(0.2),\n",
        "\n",
        "    layers.LSTM(units=50, return_sequences=True),\n",
        "    layers.Dropout(0.2),\n",
        "\n",
        "    layers.LSTM(units=50, return_sequences=True),\n",
        "    layers.Dropout(0.2),\n",
        "\n",
        "    layers.LSTM(units=50),\n",
        "    layers.Dropout(0.2),\n",
        "\n",
        "    layers.Dense(units=1),\n",
        "])\n",
        "\n",
        "model.compile(optimizer='adam',loss='mse', metrics=['mse', 'mae', 'mape'])"
      ],
      "metadata": {
        "id": "GfJluGdsLtVc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.summary()"
      ],
      "metadata": {
        "id": "Kt0XBKTDLyZy",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f1e631d9-f40a-4a50-8698-987bed161d96"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " lstm (LSTM)                 (None, 80, 50)            10400     \n",
            "                                                                 \n",
            " dropout (Dropout)           (None, 80, 50)            0         \n",
            "                                                                 \n",
            " lstm_1 (LSTM)               (None, 80, 50)            20200     \n",
            "                                                                 \n",
            " dropout_1 (Dropout)         (None, 80, 50)            0         \n",
            "                                                                 \n",
            " lstm_2 (LSTM)               (None, 80, 50)            20200     \n",
            "                                                                 \n",
            " dropout_2 (Dropout)         (None, 80, 50)            0         \n",
            "                                                                 \n",
            " lstm_3 (LSTM)               (None, 50)                20200     \n",
            "                                                                 \n",
            " dropout_3 (Dropout)         (None, 50)                0         \n",
            "                                                                 \n",
            " dense (Dense)               (None, 1)                 51        \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 71051 (277.54 KB)\n",
            "Trainable params: 71051 (277.54 KB)\n",
            "Non-trainable params: 0 (0.00 Byte)\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "early_stopping = callbacks.EarlyStopping(\n",
        "    patience=6,\n",
        "    min_delta=0.001,\n",
        "    restore_best_weights=True,\n",
        ")\n",
        "\n",
        "history = model.fit(X_train,y_train,epochs=100,batch_size=24, callbacks=[early_stopping])"
      ],
      "metadata": {
        "id": "EYEXPLyPL1V1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "beebc84d-2841-42ab-d6a1-08535a0feba6"
      },
      "execution_count": null,
      "outputs": [
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 1/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0117 - mse: 0.0117 - mae: 0.0639 - mape: 22559.2578"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "50/50 [==============================] - 16s 150ms/step - loss: 0.0117 - mse: 0.0117 - mae: 0.0639 - mape: 22559.2578\n",
            "Epoch 2/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0036 - mse: 0.0036 - mae: 0.0391 - mape: 8252.1553"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "50/50 [==============================] - 6s 122ms/step - loss: 0.0036 - mse: 0.0036 - mae: 0.0391 - mape: 8252.1553\n",
            "Epoch 3/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0029 - mse: 0.0029 - mae: 0.0349 - mape: 30706.0801"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "50/50 [==============================] - 8s 152ms/step - loss: 0.0029 - mse: 0.0029 - mae: 0.0349 - mape: 30706.0801\n",
            "Epoch 4/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0029 - mse: 0.0029 - mae: 0.0356 - mape: 29997.7305"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "50/50 [==============================] - 6s 122ms/step - loss: 0.0029 - mse: 0.0029 - mae: 0.0356 - mape: 29997.7305\n",
            "Epoch 5/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0023 - mse: 0.0023 - mae: 0.0317 - mape: 17062.3652"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "50/50 [==============================] - 7s 148ms/step - loss: 0.0023 - mse: 0.0023 - mae: 0.0317 - mape: 17062.3652\n",
            "Epoch 6/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0022 - mse: 0.0022 - mae: 0.0305 - mape: 14741.4404"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "50/50 [==============================] - 6s 123ms/step - loss: 0.0022 - mse: 0.0022 - mae: 0.0305 - mape: 14741.4404\n",
            "Epoch 7/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0021 - mse: 0.0021 - mae: 0.0304 - mape: 21608.4707"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "50/50 [==============================] - 8s 151ms/step - loss: 0.0021 - mse: 0.0021 - mae: 0.0304 - mape: 21608.4707\n",
            "Epoch 8/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0025 - mse: 0.0025 - mae: 0.0324 - mape: 26455.6074"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "50/50 [==============================] - 6s 122ms/step - loss: 0.0025 - mse: 0.0025 - mae: 0.0324 - mape: 26455.6074\n",
            "Epoch 9/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0023 - mse: 0.0023 - mae: 0.0310 - mape: 15030.0850"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "50/50 [==============================] - 8s 151ms/step - loss: 0.0023 - mse: 0.0023 - mae: 0.0310 - mape: 15030.0850\n",
            "Epoch 10/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0020 - mse: 0.0020 - mae: 0.0294 - mape: 11722.3838"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "50/50 [==============================] - 6s 123ms/step - loss: 0.0020 - mse: 0.0020 - mae: 0.0294 - mape: 11722.3838\n",
            "Epoch 11/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0019 - mse: 0.0019 - mae: 0.0280 - mape: 3791.0356"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "50/50 [==============================] - 7s 150ms/step - loss: 0.0019 - mse: 0.0019 - mae: 0.0280 - mape: 3791.0356\n",
            "Epoch 12/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0017 - mse: 0.0017 - mae: 0.0271 - mape: 3052.3059"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "50/50 [==============================] - 6s 122ms/step - loss: 0.0017 - mse: 0.0017 - mae: 0.0271 - mape: 3052.3059\n",
            "Epoch 13/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0017 - mse: 0.0017 - mae: 0.0280 - mape: 36532.7383"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "50/50 [==============================] - 8s 152ms/step - loss: 0.0017 - mse: 0.0017 - mae: 0.0280 - mape: 36532.7383\n",
            "Epoch 14/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0017 - mse: 0.0017 - mae: 0.0264 - mape: 42270.3750"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "50/50 [==============================] - 6s 123ms/step - loss: 0.0017 - mse: 0.0017 - mae: 0.0264 - mape: 42270.3750\n",
            "Epoch 15/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0023 - mse: 0.0023 - mae: 0.0325 - mape: 55561.3555"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "50/50 [==============================] - 7s 149ms/step - loss: 0.0023 - mse: 0.0023 - mae: 0.0325 - mape: 55561.3555\n",
            "Epoch 16/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0017 - mse: 0.0017 - mae: 0.0273 - mape: 6950.4551"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "50/50 [==============================] - 6s 124ms/step - loss: 0.0017 - mse: 0.0017 - mae: 0.0273 - mape: 6950.4551\n",
            "Epoch 17/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0015 - mse: 0.0015 - mae: 0.0248 - mape: 10941.3467"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "50/50 [==============================] - 7s 150ms/step - loss: 0.0015 - mse: 0.0015 - mae: 0.0248 - mape: 10941.3467\n",
            "Epoch 18/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0019 - mse: 0.0019 - mae: 0.0280 - mape: 14436.4629"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "50/50 [==============================] - 6s 124ms/step - loss: 0.0019 - mse: 0.0019 - mae: 0.0280 - mape: 14436.4629\n",
            "Epoch 19/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0018 - mse: 0.0018 - mae: 0.0274 - mape: 3834.4402"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "50/50 [==============================] - 7s 150ms/step - loss: 0.0018 - mse: 0.0018 - mae: 0.0274 - mape: 3834.4402\n",
            "Epoch 20/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0019 - mse: 0.0019 - mae: 0.0282 - mape: 29554.6191"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "50/50 [==============================] - 6s 123ms/step - loss: 0.0019 - mse: 0.0019 - mae: 0.0282 - mape: 29554.6191\n",
            "Epoch 21/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0014 - mse: 0.0014 - mae: 0.0236 - mape: 12925.5889"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "50/50 [==============================] - 8s 152ms/step - loss: 0.0014 - mse: 0.0014 - mae: 0.0236 - mape: 12925.5889\n",
            "Epoch 22/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0015 - mse: 0.0015 - mae: 0.0245 - mape: 9101.8838"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "50/50 [==============================] - 6s 122ms/step - loss: 0.0015 - mse: 0.0015 - mae: 0.0245 - mape: 9101.8838\n",
            "Epoch 23/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0014 - mse: 0.0014 - mae: 0.0242 - mape: 27754.8926"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "50/50 [==============================] - 7s 148ms/step - loss: 0.0014 - mse: 0.0014 - mae: 0.0242 - mape: 27754.8926\n",
            "Epoch 24/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0016 - mse: 0.0016 - mae: 0.0257 - mape: 10071.6016"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "50/50 [==============================] - 6s 124ms/step - loss: 0.0016 - mse: 0.0016 - mae: 0.0257 - mape: 10071.6016\n",
            "Epoch 25/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0014 - mse: 0.0014 - mae: 0.0232 - mape: 17151.9043"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "50/50 [==============================] - 8s 151ms/step - loss: 0.0014 - mse: 0.0014 - mae: 0.0232 - mape: 17151.9043\n",
            "Epoch 26/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0016 - mse: 0.0016 - mae: 0.0246 - mape: 896.2586"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "50/50 [==============================] - 6s 124ms/step - loss: 0.0016 - mse: 0.0016 - mae: 0.0246 - mape: 896.2586\n",
            "Epoch 27/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0014 - mse: 0.0014 - mae: 0.0234 - mape: 7277.9746"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "50/50 [==============================] - 7s 150ms/step - loss: 0.0014 - mse: 0.0014 - mae: 0.0234 - mape: 7277.9746\n",
            "Epoch 28/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0013 - mse: 0.0013 - mae: 0.0223 - mape: 19586.4609"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "50/50 [==============================] - 6s 124ms/step - loss: 0.0013 - mse: 0.0013 - mae: 0.0223 - mape: 19586.4609\n",
            "Epoch 29/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0014 - mse: 0.0014 - mae: 0.0239 - mape: 2346.3279"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 7s 146ms/step - loss: 0.0014 - mse: 0.0014 - mae: 0.0239 - mape: 2346.3279\n",
            "Epoch 30/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0012 - mse: 0.0012 - mae: 0.0225 - mape: 17014.7051"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 6s 122ms/step - loss: 0.0012 - mse: 0.0012 - mae: 0.0225 - mape: 17014.7051\n",
            "Epoch 31/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0012 - mse: 0.0012 - mae: 0.0221 - mape: 12051.6963"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 7s 143ms/step - loss: 0.0012 - mse: 0.0012 - mae: 0.0221 - mape: 12051.6963\n",
            "Epoch 32/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0013 - mse: 0.0013 - mae: 0.0225 - mape: 13644.2070"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 6s 128ms/step - loss: 0.0013 - mse: 0.0013 - mae: 0.0225 - mape: 13644.2070\n",
            "Epoch 33/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0011 - mse: 0.0011 - mae: 0.0219 - mape: 5390.8604"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 7s 140ms/step - loss: 0.0011 - mse: 0.0011 - mae: 0.0219 - mape: 5390.8604\n",
            "Epoch 34/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0013 - mse: 0.0013 - mae: 0.0223 - mape: 10041.4746"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 7s 134ms/step - loss: 0.0013 - mse: 0.0013 - mae: 0.0223 - mape: 10041.4746\n",
            "Epoch 35/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0011 - mse: 0.0011 - mae: 0.0211 - mape: 12836.5332"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 7s 133ms/step - loss: 0.0011 - mse: 0.0011 - mae: 0.0211 - mape: 12836.5332\n",
            "Epoch 36/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0014 - mse: 0.0014 - mae: 0.0235 - mape: 1267.4338"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 7s 144ms/step - loss: 0.0014 - mse: 0.0014 - mae: 0.0235 - mape: 1267.4338\n",
            "Epoch 37/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0014 - mse: 0.0014 - mae: 0.0233 - mape: 6737.4888"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 6s 127ms/step - loss: 0.0014 - mse: 0.0014 - mae: 0.0233 - mape: 6737.4888\n",
            "Epoch 38/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 9.4834e-04 - mse: 9.4834e-04 - mae: 0.0203 - mape: 13928.6641"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 7s 148ms/step - loss: 9.4834e-04 - mse: 9.4834e-04 - mae: 0.0203 - mape: 13928.6641\n",
            "Epoch 39/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0010 - mse: 0.0010 - mae: 0.0208 - mape: 978.9511"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 6s 123ms/step - loss: 0.0010 - mse: 0.0010 - mae: 0.0208 - mape: 978.9511\n",
            "Epoch 40/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0012 - mse: 0.0012 - mae: 0.0239 - mape: 27417.0586"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 7s 148ms/step - loss: 0.0012 - mse: 0.0012 - mae: 0.0239 - mape: 27417.0586\n",
            "Epoch 41/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0010 - mse: 0.0010 - mae: 0.0207 - mape: 8433.1865"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 6s 124ms/step - loss: 0.0010 - mse: 0.0010 - mae: 0.0207 - mape: 8433.1865\n",
            "Epoch 42/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0012 - mse: 0.0012 - mae: 0.0222 - mape: 3754.0437"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 7s 149ms/step - loss: 0.0012 - mse: 0.0012 - mae: 0.0222 - mape: 3754.0437\n",
            "Epoch 43/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0011 - mse: 0.0011 - mae: 0.0211 - mape: 16606.4434"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 6s 125ms/step - loss: 0.0011 - mse: 0.0011 - mae: 0.0211 - mape: 16606.4434\n",
            "Epoch 44/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0011 - mse: 0.0011 - mae: 0.0209 - mape: 24006.7188"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 7s 148ms/step - loss: 0.0011 - mse: 0.0011 - mae: 0.0209 - mape: 24006.7188\n",
            "Epoch 45/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0011 - mse: 0.0011 - mae: 0.0209 - mape: 12513.2334"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 6s 125ms/step - loss: 0.0011 - mse: 0.0011 - mae: 0.0209 - mape: 12513.2334\n",
            "Epoch 46/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 9.7791e-04 - mse: 9.7791e-04 - mae: 0.0212 - mape: 28850.0488"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 7s 150ms/step - loss: 9.7791e-04 - mse: 9.7791e-04 - mae: 0.0212 - mape: 28850.0488\n",
            "Epoch 47/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0011 - mse: 0.0011 - mae: 0.0215 - mape: 52934.6445"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 6s 124ms/step - loss: 0.0011 - mse: 0.0011 - mae: 0.0215 - mape: 52934.6445\n",
            "Epoch 48/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0011 - mse: 0.0011 - mae: 0.0217 - mape: 27214.6387"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 7s 150ms/step - loss: 0.0011 - mse: 0.0011 - mae: 0.0217 - mape: 27214.6387\n",
            "Epoch 49/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 9.6672e-04 - mse: 9.6672e-04 - mae: 0.0202 - mape: 16988.2051"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 6s 123ms/step - loss: 9.6672e-04 - mse: 9.6672e-04 - mae: 0.0202 - mape: 16988.2051\n",
            "Epoch 50/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0011 - mse: 0.0011 - mae: 0.0208 - mape: 15323.0010"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 7s 147ms/step - loss: 0.0011 - mse: 0.0011 - mae: 0.0208 - mape: 15323.0010\n",
            "Epoch 51/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0011 - mse: 0.0011 - mae: 0.0217 - mape: 16236.2744"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 6s 124ms/step - loss: 0.0011 - mse: 0.0011 - mae: 0.0217 - mape: 16236.2744\n",
            "Epoch 52/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 9.0125e-04 - mse: 9.0125e-04 - mae: 0.0195 - mape: 13178.5488"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 7s 147ms/step - loss: 9.0125e-04 - mse: 9.0125e-04 - mae: 0.0195 - mape: 13178.5488\n",
            "Epoch 53/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0010 - mse: 0.0010 - mae: 0.0200 - mape: 6579.5503"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 6s 126ms/step - loss: 0.0010 - mse: 0.0010 - mae: 0.0200 - mape: 6579.5503\n",
            "Epoch 54/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 9.2087e-04 - mse: 9.2087e-04 - mae: 0.0195 - mape: 18376.5723"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 7s 146ms/step - loss: 9.2087e-04 - mse: 9.2087e-04 - mae: 0.0195 - mape: 18376.5723\n",
            "Epoch 55/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 9.6687e-04 - mse: 9.6687e-04 - mae: 0.0197 - mape: 13553.2158"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 7s 131ms/step - loss: 9.6687e-04 - mse: 9.6687e-04 - mae: 0.0197 - mape: 13553.2158\n",
            "Epoch 56/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 9.9512e-04 - mse: 9.9512e-04 - mae: 0.0204 - mape: 302.9476"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 7s 136ms/step - loss: 9.9512e-04 - mse: 9.9512e-04 - mae: 0.0204 - mape: 302.9476\n",
            "Epoch 57/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 9.5661e-04 - mse: 9.5661e-04 - mae: 0.0198 - mape: 24843.8906"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 7s 139ms/step - loss: 9.5661e-04 - mse: 9.5661e-04 - mae: 0.0198 - mape: 24843.8906\n",
            "Epoch 58/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 9.9799e-04 - mse: 9.9799e-04 - mae: 0.0214 - mape: 45624.9336"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 7s 134ms/step - loss: 9.9799e-04 - mse: 9.9799e-04 - mae: 0.0214 - mape: 45624.9336\n",
            "Epoch 59/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 8.3890e-04 - mse: 8.3890e-04 - mae: 0.0185 - mape: 18781.9297"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 7s 146ms/step - loss: 8.3890e-04 - mse: 8.3890e-04 - mae: 0.0185 - mape: 18781.9297\n",
            "Epoch 60/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 9.3294e-04 - mse: 9.3294e-04 - mae: 0.0194 - mape: 10887.6592"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 7s 128ms/step - loss: 9.3294e-04 - mse: 9.3294e-04 - mae: 0.0194 - mape: 10887.6592\n",
            "Epoch 61/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 7.4193e-04 - mse: 7.4193e-04 - mae: 0.0180 - mape: 27463.0547"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 7s 150ms/step - loss: 7.4193e-04 - mse: 7.4193e-04 - mae: 0.0180 - mape: 27463.0547\n",
            "Epoch 62/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 8.8167e-04 - mse: 8.8167e-04 - mae: 0.0187 - mape: 25366.9258"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 6s 127ms/step - loss: 8.8167e-04 - mse: 8.8167e-04 - mae: 0.0187 - mape: 25366.9258\n",
            "Epoch 63/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 7.8296e-04 - mse: 7.8296e-04 - mae: 0.0180 - mape: 12804.3027"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 8s 153ms/step - loss: 7.8296e-04 - mse: 7.8296e-04 - mae: 0.0180 - mape: 12804.3027\n",
            "Epoch 64/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0010 - mse: 0.0010 - mae: 0.0214 - mape: 36930.5352"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 6s 128ms/step - loss: 0.0010 - mse: 0.0010 - mae: 0.0214 - mape: 36930.5352\n",
            "Epoch 65/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 9.8523e-04 - mse: 9.8523e-04 - mae: 0.0210 - mape: 34266.2422"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 7s 150ms/step - loss: 9.8523e-04 - mse: 9.8523e-04 - mae: 0.0210 - mape: 34266.2422\n",
            "Epoch 66/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 9.8594e-04 - mse: 9.8594e-04 - mae: 0.0210 - mape: 3096.2754"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 6s 127ms/step - loss: 9.8594e-04 - mse: 9.8594e-04 - mae: 0.0210 - mape: 3096.2754\n",
            "Epoch 67/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 8.3058e-04 - mse: 8.3058e-04 - mae: 0.0185 - mape: 16756.3652"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 8s 152ms/step - loss: 8.3058e-04 - mse: 8.3058e-04 - mae: 0.0185 - mape: 16756.3652\n",
            "Epoch 68/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 8.2067e-04 - mse: 8.2067e-04 - mae: 0.0190 - mape: 6839.5244"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 6s 127ms/step - loss: 8.2067e-04 - mse: 8.2067e-04 - mae: 0.0190 - mape: 6839.5244\n",
            "Epoch 69/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0011 - mse: 0.0011 - mae: 0.0217 - mape: 24638.6152"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 7s 150ms/step - loss: 0.0011 - mse: 0.0011 - mae: 0.0217 - mape: 24638.6152\n",
            "Epoch 70/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 9.8627e-04 - mse: 9.8627e-04 - mae: 0.0197 - mape: 14828.5322"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 6s 126ms/step - loss: 9.8627e-04 - mse: 9.8627e-04 - mae: 0.0197 - mape: 14828.5322\n",
            "Epoch 71/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 9.7417e-04 - mse: 9.7417e-04 - mae: 0.0201 - mape: 7481.4800"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 7s 149ms/step - loss: 9.7417e-04 - mse: 9.7417e-04 - mae: 0.0201 - mape: 7481.4800\n",
            "Epoch 72/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0010 - mse: 0.0010 - mae: 0.0205 - mape: 6816.7339"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 7s 131ms/step - loss: 0.0010 - mse: 0.0010 - mae: 0.0205 - mape: 6816.7339\n",
            "Epoch 73/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 9.7721e-04 - mse: 9.7721e-04 - mae: 0.0202 - mape: 3261.8862"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 7s 141ms/step - loss: 9.7721e-04 - mse: 9.7721e-04 - mae: 0.0202 - mape: 3261.8862\n",
            "Epoch 74/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 9.1945e-04 - mse: 9.1945e-04 - mae: 0.0196 - mape: 15433.9814"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 7s 136ms/step - loss: 9.1945e-04 - mse: 9.1945e-04 - mae: 0.0196 - mape: 15433.9814\n",
            "Epoch 75/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 8.5871e-04 - mse: 8.5871e-04 - mae: 0.0194 - mape: 29671.4258"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 7s 132ms/step - loss: 8.5871e-04 - mse: 8.5871e-04 - mae: 0.0194 - mape: 29671.4258\n",
            "Epoch 76/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0011 - mse: 0.0011 - mae: 0.0219 - mape: 19062.3164"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 7s 144ms/step - loss: 0.0011 - mse: 0.0011 - mae: 0.0219 - mape: 19062.3164\n",
            "Epoch 77/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 8.0387e-04 - mse: 8.0387e-04 - mae: 0.0189 - mape: 8875.6816"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 6s 127ms/step - loss: 8.0387e-04 - mse: 8.0387e-04 - mae: 0.0189 - mape: 8875.6816\n",
            "Epoch 78/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 8.3174e-04 - mse: 8.3174e-04 - mae: 0.0187 - mape: 12329.2734"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 7s 149ms/step - loss: 8.3174e-04 - mse: 8.3174e-04 - mae: 0.0187 - mape: 12329.2734\n",
            "Epoch 79/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0010 - mse: 0.0010 - mae: 0.0204 - mape: 18829.1211"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 6s 126ms/step - loss: 0.0010 - mse: 0.0010 - mae: 0.0204 - mape: 18829.1211\n",
            "Epoch 80/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 9.6393e-04 - mse: 9.6393e-04 - mae: 0.0194 - mape: 22713.7227"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 8s 152ms/step - loss: 9.6393e-04 - mse: 9.6393e-04 - mae: 0.0194 - mape: 22713.7227\n",
            "Epoch 81/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0014 - mse: 0.0014 - mae: 0.0257 - mape: 45755.1406"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 6s 126ms/step - loss: 0.0014 - mse: 0.0014 - mae: 0.0257 - mape: 45755.1406\n",
            "Epoch 82/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 8.6111e-04 - mse: 8.6111e-04 - mae: 0.0191 - mape: 37986.8555"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 7s 148ms/step - loss: 8.6111e-04 - mse: 8.6111e-04 - mae: 0.0191 - mape: 37986.8555\n",
            "Epoch 83/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 9.1040e-04 - mse: 9.1040e-04 - mae: 0.0190 - mape: 26802.6641"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 6s 125ms/step - loss: 9.1040e-04 - mse: 9.1040e-04 - mae: 0.0190 - mape: 26802.6641\n",
            "Epoch 84/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 7.7792e-04 - mse: 7.7792e-04 - mae: 0.0179 - mape: 17434.8633"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 7s 148ms/step - loss: 7.7792e-04 - mse: 7.7792e-04 - mae: 0.0179 - mape: 17434.8633\n",
            "Epoch 85/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 7.5044e-04 - mse: 7.5044e-04 - mae: 0.0175 - mape: 13116.4229"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 6s 126ms/step - loss: 7.5044e-04 - mse: 7.5044e-04 - mae: 0.0175 - mape: 13116.4229\n",
            "Epoch 86/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 8.9248e-04 - mse: 8.9248e-04 - mae: 0.0198 - mape: 1793.8536"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 7s 150ms/step - loss: 8.9248e-04 - mse: 8.9248e-04 - mae: 0.0198 - mape: 1793.8536\n",
            "Epoch 87/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 9.1231e-04 - mse: 9.1231e-04 - mae: 0.0194 - mape: 40515.1797"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 6s 126ms/step - loss: 9.1231e-04 - mse: 9.1231e-04 - mae: 0.0194 - mape: 40515.1797\n",
            "Epoch 88/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 7.4822e-04 - mse: 7.4822e-04 - mae: 0.0178 - mape: 859.8123"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 7s 146ms/step - loss: 7.4822e-04 - mse: 7.4822e-04 - mae: 0.0178 - mape: 859.8123\n",
            "Epoch 89/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 8.5647e-04 - mse: 8.5647e-04 - mae: 0.0184 - mape: 5552.6240"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 6s 130ms/step - loss: 8.5647e-04 - mse: 8.5647e-04 - mae: 0.0184 - mape: 5552.6240\n",
            "Epoch 90/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 7.5273e-04 - mse: 7.5273e-04 - mae: 0.0180 - mape: 11177.1777"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 7s 145ms/step - loss: 7.5273e-04 - mse: 7.5273e-04 - mae: 0.0180 - mape: 11177.1777\n",
            "Epoch 91/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0010 - mse: 0.0010 - mae: 0.0209 - mape: 28173.4375"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 7s 136ms/step - loss: 0.0010 - mse: 0.0010 - mae: 0.0209 - mape: 28173.4375\n",
            "Epoch 92/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 7.2958e-04 - mse: 7.2958e-04 - mae: 0.0181 - mape: 30019.9219"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 7s 137ms/step - loss: 7.2958e-04 - mse: 7.2958e-04 - mae: 0.0181 - mape: 30019.9219\n",
            "Epoch 93/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 8.2059e-04 - mse: 8.2059e-04 - mae: 0.0188 - mape: 2083.1851"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 7s 144ms/step - loss: 8.2059e-04 - mse: 8.2059e-04 - mae: 0.0188 - mape: 2083.1851\n",
            "Epoch 94/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 0.0011 - mse: 0.0011 - mae: 0.0208 - mape: 24094.6777"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 7s 130ms/step - loss: 0.0011 - mse: 0.0011 - mae: 0.0208 - mape: 24094.6777\n",
            "Epoch 95/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 8.6501e-04 - mse: 8.6501e-04 - mae: 0.0194 - mape: 32832.9297"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 7s 150ms/step - loss: 8.6501e-04 - mse: 8.6501e-04 - mae: 0.0194 - mape: 32832.9297\n",
            "Epoch 96/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 7.4463e-04 - mse: 7.4463e-04 - mae: 0.0183 - mape: 5703.3901"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 6s 125ms/step - loss: 7.4463e-04 - mse: 7.4463e-04 - mae: 0.0183 - mape: 5703.3901\n",
            "Epoch 97/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 8.0029e-04 - mse: 8.0029e-04 - mae: 0.0186 - mape: 45947.5742"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 8s 150ms/step - loss: 8.0029e-04 - mse: 8.0029e-04 - mae: 0.0186 - mape: 45947.5742\n",
            "Epoch 98/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 8.3287e-04 - mse: 8.3287e-04 - mae: 0.0191 - mape: 19478.3594"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 6s 127ms/step - loss: 8.3287e-04 - mse: 8.3287e-04 - mae: 0.0191 - mape: 19478.3594\n",
            "Epoch 99/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 6.8175e-04 - mse: 6.8175e-04 - mae: 0.0168 - mape: 15854.7783"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 8s 153ms/step - loss: 6.8175e-04 - mse: 6.8175e-04 - mae: 0.0168 - mape: 15854.7783\n",
            "Epoch 100/100\n",
            "50/50 [==============================] - ETA: 0s - loss: 7.7136e-04 - mse: 7.7136e-04 - mae: 0.0180 - mape: 22023.8047"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:Early stopping conditioned on metric `val_loss` which is not available. Available metrics are: loss,mse,mae,mape\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r50/50 [==============================] - 6s 125ms/step - loss: 7.7136e-04 - mse: 7.7136e-04 - mae: 0.0180 - mape: 22023.8047\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "history_frame = pd.DataFrame(history.history)"
      ],
      "metadata": {
        "id": "19uEnLXXL5Fo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(history_frame.loc[:, ['mse']])\n",
        "plt.title('Mean squared error')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "sKZRWvk5MGei",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        },
        "outputId": "c72a80e0-9a23-488b-84ae-e94e4e734de7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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Odi8eTM0Go1RueLiYqOfO3bsCJlMZnSsXbt2OHjwYKN1HzlyJL788kv861//wsyZMzFs2DA88sgjePTRRyGX1/4ede7cOXTp0qXO9bt27drotW/km2++wYIFC3Ds2DFUV1cbjgcEBNQp+/djp06dghACr7/+Ol5//fV6r5+XlwcfHx+cO3cO4eHhdd5vSv1NuU9j9QcAHx8fQ5DTO3fuHIKCggzPWq979+6G96/X0LWJWiOGGqJb1BNPPIGJEydCrVbjvvvuM7SA/J1Op4O7uzt++OGHet/X/xZeVFSEyMhIODk54b///S8CAwNhY2ODtLQ0vPrqq3VaVeprGQBq18tpjK2tLbZv344tW7bg999/R0JCAlatWoV77rkHf/75Z4PXbcjfg4+eVqs1utb333+PcePGITY2Fq+88grc3d2hUCgQFxeH06dP11vP6+k//8svv4zo6Oh679mlSxeT6l6f5tynobE6TR3D0xgprkF0q2CoIbpFPfzww5g8eTL27NmDVatWNVguMDAQf/31FwYPHtzoF9TWrVtx6dIlrFmzBnfddZfheGZmpqT1BgC5XI5hw4Zh2LBh+PDDD/HOO+/gtddew5YtWxAVFQU/Pz9kZGRACGEUWo4fP17nWu3atUNRUVGd4+fOnUPnzp0NP69evRqdO3fGmjVrjK45b968JtVZfy0rKytERUU1WtbPzw8nT56sc7y++t/MfZrDz88PBw8ehE6nM2qt0Xcv+vn5SX5PolsFx9QQ3aIcHBzw2Wef4Y033sCDDz7YYLnHH38cWq0Wb775Zp33ampqDIFA36pxfUtLVVUVPv30U0nrXVhYWOeYfuZRZWUlgNq1eHJycrB69WpDmbKyMixdurTOuYGBgdizZ4/R+inr169Hdna2Ubn6Pl9ycjKSkpKaVG93d3cMHToUn3/+OS5evFjn/fz8fMM/33///dizZw9SUlKM3m+otay592mO+++/H2q12igI19TU4JNPPoGDgwMiIyNv6vpEtzK21BDdwsaOHXvDMpGRkZg8eTLi4uKwf/9+3HvvvbCyssLJkycRHx+P//3vf3j00UcxaNAgtGvXDmPHjsVLL70EmUyG77777obdSab673//i+3btyMmJgZ+fn7Iy8vDp59+io4dO2LIkCEAage+Llq0CGPGjEFqaiq8vLzw3Xffwc7Ors71/vWvf2H1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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(history_frame.loc[:, ['mae']])\n",
        "plt.title('Mean absolute error')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "6deZLxPUMK1D",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        },
        "outputId": "3892c43f-2e77-4301-8f87-5fe2e9e0f81d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(history_frame.loc[:, ['mape']])\n",
        "plt.title('Mean absolute percentage error')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "1szDvNmVMPWt",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        },
        "outputId": "2c18f8a8-0458-495f-fabc-f1941cf6e91e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dataset_total = df['Close']\n",
        "inputs = dataset_total[len(dataset_total)-len(test['Close'].values) - 80:].values\n",
        "inputs = inputs.reshape(-1,1)\n",
        "inputs  = sc.transform(inputs)"
      ],
      "metadata": {
        "id": "ZOkbLhUeMTdU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "M8iOBm4inanj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_test = []\n",
        "for i in range(80,len(inputs)):\n",
        "    X_test.append(inputs[i-80:i,0])\n",
        "X_test = np.array(X_test)\n",
        "X_test = np.reshape(X_test, (X_test.shape[0],X_test.shape[1],1))\n",
        "predicted_stock_price = model.predict(X_test)\n",
        "predicted_stock_price = sc.inverse_transform(predicted_stock_price)"
      ],
      "metadata": {
        "id": "rcpiYt2UMYYq",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5df6ce5b-359e-4030-c943-77941292854d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "26/26 [==============================] - 3s 37ms/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "predictions = pd.DataFrame()\n",
        "predictions['Actuals'] = test['Close']\n",
        "predictions['Predictions'] = predicted_stock_price"
      ],
      "metadata": {
        "id": "o3eveSSvMb5O"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(14,8))\n",
        "plt.title('Google Close Stock Price')\n",
        "plt.plot(predictions['Actuals'], label='Actuals')\n",
        "plt.plot(predictions['Predictions'], label='Predictions')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "CqXBAv6tMg-g",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d16655fb-60f1-411b-d320-d0f5138102ab"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1400x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}